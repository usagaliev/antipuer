// –ß–∏—Ç–∞–µ—Ç CSV –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥, —Å—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–∏ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø–æ TIMEZONE) –∏ —à–ª—ë—Ç —Å–≤–æ–¥–∫—É
import fs from 'fs';
import path from 'path';

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const TIMEZONE = process.env.TIMEZONE || 'Asia/Bishkek';

if (!BOT_TOKEN || !CHAT_ID) {
  console.error("Missing env: BOT_TOKEN, CHAT_ID");
  process.exit(1);
}

function fmtDMY(d) {
  const pad = n => String(n).padStart(2,'0');
  return `${pad(d.getUTCDate())}.${pad(d.getUTCMonth()+1)}.${d.getUTCFullYear()}`;
}
function todayInTZ(tz) {
  const now = new Date();
  const fmt = new Intl.DateTimeFormat('ru-RU', {
    timeZone: tz, year: 'numeric', month: '2-digit', day: '2-digit'
  });
  const [dd, mm, yyyy] = fmt.format(now).split('.');
  return new Date(Date.UTC(+yyyy, +mm - 1, +dd));
}

const today = todayInTZ(TIMEZONE);
const dow = today.getUTCDay();                // 0=–≤—Å
const daysSinceMonday = (dow + 6) % 7;        // –ø–Ω=0
const weekStart = new Date(today); weekStart.setUTCDate(today.getUTCDate() - daysSinceMonday);
const weekEnd   = new Date(weekStart); weekEnd.setUTCDate(weekStart.getUTCDate() + 6);

const rangeText = `${fmtDMY(weekStart)} ‚Äî ${fmtDMY(weekEnd)}`;

const year = weekStart.getUTCFullYear();
const CSV = path.join('data', `expenses-${year}.csv`);

let total = 0;
const byCat = {};
let count = 0;

if (fs.existsSync(CSV)) {
  const lines = fs.readFileSync(CSV, 'utf-8').trim().split('\n');
  const header = lines.shift(); // date,time,amount,category,note,message_id

  function inWeek(dYMD) {
    const [y,m,d] = dYMD.split('-').map(Number);
    const dt = new Date(Date.UTC(y, m-1, d));
    return dt >= weekStart && dt <= weekEnd;
  }

  for (const ln of lines) {
    const [date, time, amount, category, note, message_id] =
      ln.split(/,(?=(?:[^"]*"[^"]*")*[^"]*$)/);
    if (!inWeek(date)) continue;
    const val = parseFloat(amount);
    if (!isFinite(val)) continue;
    total += val;
    byCat[category] = (byCat[category] || 0) + val;
    count++;
  }
}

const catLines = Object.entries(byCat)
  .sort((a,b) => b[1]-a[1])
  .map(([c, v]) => `‚Ä¢ ${c}: ${v.toFixed(2)}`)
  .join('\n') || '‚Ä¢ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)';

const prefix = count > 0
  ? `üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (${rangeText})`
  : `üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (${rangeText}) ‚Äî –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç`;

const totalsLine = count > 0
  ? `–ó–∞–ø–∏—Å–µ–π: ${count}\n–ò—Ç–æ–≥–æ: ${total.toFixed(2)}`
  : `–ß—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ:
‚Äî –û—Ç–ø—Ä–∞–≤–ª—è–π –±–æ—Ç—É: ¬´–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø [–∑–∞–º–µ—Ç–∫–∞]¬ª
‚Äî –ü—Ä–∏–º–µ—Ä—ã: 1200 –µ–¥–∞ —à–∞–≤–µ—Ä–º–∞; 350 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç–∞–∫—Å–∏; 99 –¥–æ–º –ª–∞–º–ø–æ—á–∫–∞`;

const body = count > 0
  ? `\n\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n${catLines}\n\n–°–æ–≤–µ—Ç: –≤—ã–±–µ—Ä–∏ 1 –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚Äë–ø–æ–∂–∏—Ä–∞—Ç–µ–ª—å –∏ —É—Ä–µ–∂—å –µ—ë –Ω–∞ 20% –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.`
  : '';

const text = `${prefix}\n${totalsLine}${body}`;

const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
const payload = { chat_id: CHAT_ID, text, disable_web_page_preview: true };

const res = await fetch(url, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(payload)
});
if (!res.ok) {
  console.error("Telegram API error:", res.status, await res.text());
  process.exit(1);
}
console.log("Weekly finance summary sent");
